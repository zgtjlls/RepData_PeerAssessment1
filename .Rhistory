table(payments$DRG.Definition)
colnames(table(payments$DRG.Definition))
colname(table(payments$DRG.Definition))
temp <- table(payments$DRG.Definition)
temp[1]
tt <- temp1
tt <- temp[1]
tt
tt[1]
rownames(temp)
with(subset(payments, DRG.Definition = med_cond[1]), plot(Average.Covered.Charges, Average.Total.Payments, pch = 20, cex=.1, col = DRG.Definition,
xlab = "mean covered charges ", ylab = "mean total payments"))
with(payments, legend("topright", pch = 20, col = unique(DRG.Definition), legend = unique(substr(payments$DRG.Definition, 0,3))))
title("mean total payments vs mean covered charges by medical condition")
subset(payments, DRG.Definition = med_cond[1])
temp<-subset(payments, DRG.Definition = med_cond[1]),
temp<-subset(payments, DRG.Definition = med_cond[1])
>subset
?>subset
?subset
## set working directory
setwd("~/Documents/Coursera/Data Science/Reproducible Research/practice_project")
getwd()
## Download Data
url <- "https://d18ky98rnyall9.cloudfront.net/_e143dff6e844c7af8da2a4e71d7c054d_payments.csv?Expires=1497830400&Signature=RCZCe4MW-uwXSWDVH5YDR1flW2IvgxNX8-YLUeIjpt4W0rSZXt8Sl-2b7lBpj73Yi05rfOG3j0dZybUowd7zjKp~QCK9d5Kf18NEQxKlIg2irskPi09oWsl-BYi6xOsJcjFHrE4BjMeIZqao58WpTf-yz8o9nXht~2XD1AtR9UM_&Key-Pair-Id=APKAJLTNE6QMUY6HBC5A"
data_name <- "payments.csv"
if (! file.exists(data_name)){
download.file(url, data_name)
}
## load data
payments <- read.csv(data_name)
View(payments)
summary(payments)
sum(is.na(payments))
## relationship between Average.Covered.Charges and Average.Total.Payments
#pdf("question1")
with(payments, plot(Average.Covered.Charges, Average.Total.Payments, pch = 20, cex = 0.5,
col = rgb(0,0,1, alpha = 0.2),
xlab = "mean covered charges ", ylab = "mean total payments"))
abline(with(payments, lm(Average.Total.Payments~Average.Covered.Charges)), col = "red")
title("mean total payments vs mean covered charges")
med_cond <- table(payments$DRG.Definition)
with(subset(payments, DRG.Definition == med_cond[1]),
plot(Average.Covered.Charges, Average.Total.Payments, pch = 20, cex=.1, col = Provider.State,
xlab = "mean covered charges ", ylab = "mean total payments"))
temp<-subset(payments, DRG.Definition == med_cond[1])
med_cond
table(payments$DRG.Definition)
med_cond[1]
med_cond <- rowname(table(payments$DRG.Definition))
with(subset(payments, DRG.Definition == med_cond[1]),
plot(Average.Covered.Charges, Average.Total.Payments, pch = 20, cex=.1, col = Provider.State,
xlab = "mean covered charges ", ylab = "mean total payments"))
med_cond[1]
med_cond <- rownames(table(payments$DRG.Definition))
with(subset(payments, DRG.Definition == med_cond[1]),
plot(Average.Covered.Charges, Average.Total.Payments, pch = 20, cex=.1, col = Provider.State,
xlab = "mean covered charges ", ylab = "mean total payments"))
with(payments, legend("topright", pch = 20, col = unique(DRG.Definition), legend = unique(substr(payments$DRG.Definition, 0,3))))
with(payments, legend("topright", pch = 20, col = unique(Provider.State), legend = unique(substr(payments$Provider.State, 0,3))))
med_cond <- rownames(table(payments$DRG.Definition))
with(subset(payments, DRG.Definition == med_cond[1]),
plot(Average.Covered.Charges, Average.Total.Payments, pch = 20, cex=.5, col = Provider.State,
xlab = "mean covered charges ", ylab = "mean total payments"))
with(payments, legend("topright", pch = 20, col = unique(Provider.State), legend = unique(substr(payments$Provider.State, 0,3))))
abline(with(subset(payments, DRG.Definition == med_cond[1]) ,
lm(Average.Total.Payments ~ Average.Covered.Charges)), col = "red")
abline(with(subset(payments, DRG.Definition == med_cond[1] & Provider.State = col = unique(Provider.State)[1]) ,
lm(Average.Total.Payments ~ Average.Covered.Charges)), col = "red")
abline(with(subset(payments, DRG.Definition == med_cond[1] & Provider.State == unique(Provider.State)[1]) ,
lm(Average.Total.Payments ~ Average.Covered.Charges)), col = "red")
lm(Average.Total.Payments ~ Average.Covered.Charges)), col = 1)
abline(with(subset(payments, DRG.Definition == med_cond[1] & Provider.State == unique(Provider.State)[1]) ,
lm(Average.Total.Payments ~ Average.Covered.Charges)), col = 1)
abline(with(subset(payments, DRG.Definition == med_cond[1] & Provider.State == unique(Provider.State)[2]) ,
lm(Average.Total.Payments ~ Average.Covered.Charges)), col = 2)
abline(with(subset(payments, DRG.Definition == med_cond[1] & Provider.State == unique(Provider.State)[3]) ,
lm(Average.Total.Payments ~ Average.Covered.Charges)), col = 3)
abline(with(subset(payments, DRG.Definition == med_cond[1] & Provider.State == unique(Provider.State)[4]),
lm(Average.Total.Payments ~ Average.Covered.Charges)), col = 4)
med_cond <- rownames(table(payments$DRG.Definition))
with(subset(payments, DRG.Definition == med_cond[1]),
plot(Average.Covered.Charges, Average.Total.Payments, pch = 20, cex=.5, col = Provider.State,
xlab = "mean covered charges ", ylab = "mean total payments"))
with(payments, legend("topright", pch = 20, col = unique(Provider.State), legend = unique(substr(payments$Provider.State, 0,3))))
abline(with(subset(payments, DRG.Definition == med_cond[1] & Provider.State == unique(Provider.State)[1]) ,
lm(Average.Total.Payments ~ Average.Covered.Charges)), col = 1)
abline(with(subset(payments, DRG.Definition == med_cond[1] & Provider.State == unique(Provider.State)[2]) ,
lm(Average.Total.Payments ~ Average.Covered.Charges)), col = 2)
abline(with(subset(payments, DRG.Definition == med_cond[1] & Provider.State == unique(Provider.State)[3]) ,
lm(Average.Total.Payments ~ Average.Covered.Charges)), col = 3)
abline(with(subset(payments, DRG.Definition == med_cond[1] & Provider.State == unique(Provider.State)[4]),
lm(Average.Total.Payments ~ Average.Covered.Charges)), col = 4)
abline(with(subset(payments, DRG.Definition == med_cond[1] & Provider.State == unique(Provider.State)[5]),
lm(Average.Total.Payments ~ Average.Covered.Charges)), col = 5)
abline(with(subset(payments, DRG.Definition == med_cond[1] & Provider.State == unique(Provider.State)[6]),
lm(Average.Total.Payments ~ Average.Covered.Charges)), col = 6)
title("mean total payments vs mean covered charges by medical condition")
medCond_name <- rownames(table(payments$DRG.Definition))
provider_name <- rownames(table(payments$Provider.State))
with(subset(payments, DRG.Definition == medCond_name[i]),
plot(Average.Covered.Charges, Average.Total.Payments, pch = 20, cex=.5, col = Provider.State,
xlab = "mean covered charges ", ylab = "mean total payments"))
medCond_name
medCond_name[1]
View(subset(payments, DRG.Definition == medCond_name[i])
)
## set working directory
setwd("~/Documents/Coursera/Data Science/Reproducible Research/practice_project")
getwd()
## Download Data
url <- "https://d18ky98rnyall9.cloudfront.net/_e143dff6e844c7af8da2a4e71d7c054d_payments.csv?Expires=1497830400&Signature=RCZCe4MW-uwXSWDVH5YDR1flW2IvgxNX8-YLUeIjpt4W0rSZXt8Sl-2b7lBpj73Yi05rfOG3j0dZybUowd7zjKp~QCK9d5Kf18NEQxKlIg2irskPi09oWsl-BYi6xOsJcjFHrE4BjMeIZqao58WpTf-yz8o9nXht~2XD1AtR9UM_&Key-Pair-Id=APKAJLTNE6QMUY6HBC5A"
data_name <- "payments.csv"
if (! file.exists(data_name)){
download.file(url, data_name)
}
## load data
payments <- read.csv(data_name)
#View(payments)
summary(payments)
sum(is.na(payments))
## relationship between Average.Covered.Charges and Average.Total.Payments
#pdf("question1")
with(payments, plot(Average.Covered.Charges, Average.Total.Payments, pch = 20, cex = 0.5,
col = rgb(0,0,1, alpha = 0.2),
xlab = "mean covered charges ", ylab = "mean total payments"))
abline(with(payments, lm(Average.Total.Payments~Average.Covered.Charges)), col = "red")
title("mean total payments vs mean covered charges")
#dev.off()
## vary by medical condition and state
#table(payments$DRG.Definition)
#par(mfrow=c(3,2))
with(payments, plot(Average.Covered.Charges, Average.Total.Payments, pch = 20, cex=.1, col = DRG.Definition,
xlab = "mean covered charges ", ylab = "mean total payments"))
with(payments, legend("topright", pch = 20, col = unique(DRG.Definition), legend = unique(substr(payments$DRG.Definition, 0,3))))
title("mean total payments vs mean covered charges by medical condition")
# library(lattice)
# pdf("question2")
# xyplot(Average.Total.Payments ~ Average.Covered.Charges | DRG.Definition, data = payments,
#        panel = function(x, y) {
#            panel.xyplot(x, y)
#            panel.abline(lm(y ~ x), col = "red")
#        },
#        layout = c(3,2), groups = Provider.State,
#        main = "mean total payments vs mean covered charges by medical conditions",
#        xlab = "mean covered charges", ylab = "mean total payments", fontsize = 3)
#
#
# ## vary by state
# xyplot(Average.Total.Payments ~ Average.Covered.Charges | Provider.State,
#        groups = Provider.State, fill.color = as.character(payments$Provider.State), data = payments,
#        panel = function(x, y) {
#            panel.xyplot(x, y)
#            panel.abline(lm(y ~ x), col = "red")
#        },
#        layout = c(3,2),
#        main = "mean total payments vs mean covered charges by state",
#        xlab = "mean covered charges", ylab = "mean total payments", fontsize = 10)
# dev.off()
i  =1
medCond_name <- rownames(table(payments$DRG.Definition))
provider_name <- rownames(table(payments$Provider.State))
with(subset(payments, DRG.Definition == medCond_name[i]),
plot(Average.Covered.Charges, Average.Total.Payments, pch = 20, cex=.5, col = Provider.State,
xlab = "mean covered charges ", ylab = "mean total payments"))
with(payments, legend("topright", pch = 20, col = unique(Provider.State), legend = unique(substr(payments$Provider.State, 0,3))))
for (j in length(provider_name)){
abline(with(subset(payments, DRG.Definition == med_cond[1] & Provider.State == unique(Provider.State)[j]) ,
lm(Average.Total.Payments ~ Average.Covered.Charges)), col = j)
}
title("mean total payments vs mean covered charges by medical condition")
j
i  =1
medCond_name <- rownames(table(payments$DRG.Definition))
provider_name <- rownames(table(payments$Provider.State))
with(subset(payments, DRG.Definition == medCond_name[i]),
plot(Average.Covered.Charges, Average.Total.Payments, pch = 20, cex=.5, col = Provider.State,
xlab = "mean covered charges ", ylab = "mean total payments"))
with(payments, legend("topright", pch = 20, col = unique(Provider.State), legend = unique(substr(payments$Provider.State, 0,3))))
for (j in length(provider_name)){
abline(with(subset(payments, DRG.Definition == med_cond[1] & Provider.State == provider_name[j]) ,
lm(Average.Total.Payments ~ Average.Covered.Charges)), col = j)
}
provider_name
provider_name[1]
for (j in length(provider_name)){
abline(with(subset(payments, DRG.Definition == med_cond[1] & Provider.State == provider_name[j]) ,
lm(Average.Total.Payments ~ Average.Covered.Charges)), col = j)
}
for (j in length(provider_name)){
abline(with(subset(payments, DRG.Definition == med_cond[1] & Provider.State == provider_name[j]) ,
lm(Average.Total.Payments ~ Average.Covered.Charges)), col = j)
print(j)
}
for (j in 1:length(provider_name)){
abline(with(subset(payments, DRG.Definition == med_cond[1] & Provider.State == provider_name[j]) ,
lm(Average.Total.Payments ~ Average.Covered.Charges)), col = j)
}
title("mean total payments vs mean covered charges by medical condition")
title(medCond_name[i])
i = 1
medCond_name <- rownames(table(payments$DRG.Definition))
provider_name <- rownames(table(payments$Provider.State))
with(subset(payments, DRG.Definition == medCond_name[i]),
plot(Average.Covered.Charges, Average.Total.Payments, pch = 20, cex=.5, col = Provider.State,
xlab = "mean covered charges ", ylab = "mean total payments"))
with(payments, legend("topright", pch = 20, col = unique(Provider.State), legend = unique(substr(payments$Provider.State, 0,3))))
for (j in 1:length(provider_name)){
abline(with(subset(payments, DRG.Definition == med_cond[1] & Provider.State == provider_name[j]) ,
lm(Average.Total.Payments ~ Average.Covered.Charges)), col = j)
}
title(medCond_name[i])
par(mfrow = c(2,3))
par(mfrow = c(2,3))
medCond_name <- rownames(table(payments$DRG.Definition))
provider_name <- rownames(table(payments$Provider.State))
for(i in 1:length(medCond_name)){
with(subset(payments, DRG.Definition == medCond_name[i]),
plot(Average.Covered.Charges, Average.Total.Payments, pch = 20, cex=.5, col = Provider.State,
xlab = "mean covered charges ", ylab = "mean total payments"))
with(payments, legend("topright", pch = 20, col = unique(Provider.State), legend = unique(substr(payments$Provider.State, 0,3))))
for (j in 1:length(provider_name)){
abline(with(subset(payments, DRG.Definition == med_cond[1] & Provider.State == provider_name[j]) ,
lm(Average.Total.Payments ~ Average.Covered.Charges)), col = j)
}
title(medCond_name[i])
}
## set working directory
setwd("~/Documents/Coursera/Data Science/Reproducible Research/practice_project")
getwd()
## Download Data
url <- "https://d18ky98rnyall9.cloudfront.net/_e143dff6e844c7af8da2a4e71d7c054d_payments.csv?Expires=1497830400&Signature=RCZCe4MW-uwXSWDVH5YDR1flW2IvgxNX8-YLUeIjpt4W0rSZXt8Sl-2b7lBpj73Yi05rfOG3j0dZybUowd7zjKp~QCK9d5Kf18NEQxKlIg2irskPi09oWsl-BYi6xOsJcjFHrE4BjMeIZqao58WpTf-yz8o9nXht~2XD1AtR9UM_&Key-Pair-Id=APKAJLTNE6QMUY6HBC5A"
data_name <- "payments.csv"
if (! file.exists(data_name)){
download.file(url, data_name)
}
## load data
payments <- read.csv(data_name)
#View(payments)
summary(payments)
sum(is.na(payments))
## relationship between Average.Covered.Charges and Average.Total.Payments
#pdf("question1")
with(payments, plot(Average.Covered.Charges, Average.Total.Payments, pch = 20, cex = 0.5,
col = rgb(0,0,1, alpha = 0.2),
xlab = "mean covered charges ", ylab = "mean total payments"))
abline(with(payments, lm(Average.Total.Payments~Average.Covered.Charges)), col = "red")
title("mean total payments vs mean covered charges")
#dev.off()
## vary by medical condition and state
#table(payments$DRG.Definition)
#par(mfrow=c(3,2))
with(payments, plot(Average.Covered.Charges, Average.Total.Payments, pch = 20, cex=.1, col = DRG.Definition,
xlab = "mean covered charges ", ylab = "mean total payments"))
with(payments, legend("topright", pch = 20, col = unique(DRG.Definition), legend = unique(substr(payments$DRG.Definition, 0,3))))
title("mean total payments vs mean covered charges by medical condition")
# library(lattice)
# pdf("question2")
# xyplot(Average.Total.Payments ~ Average.Covered.Charges | DRG.Definition, data = payments,
#        panel = function(x, y) {
#            panel.xyplot(x, y)
#            panel.abline(lm(y ~ x), col = "red")
#        },
#        layout = c(3,2), groups = Provider.State,
#        main = "mean total payments vs mean covered charges by medical conditions",
#        xlab = "mean covered charges", ylab = "mean total payments", fontsize = 3)
#
#
# ## vary by state
# xyplot(Average.Total.Payments ~ Average.Covered.Charges | Provider.State,
#        groups = Provider.State, fill.color = as.character(payments$Provider.State), data = payments,
#        panel = function(x, y) {
#            panel.xyplot(x, y)
#            panel.abline(lm(y ~ x), col = "red")
#        },
#        layout = c(3,2),
#        main = "mean total payments vs mean covered charges by state",
#        xlab = "mean covered charges", ylab = "mean total payments", fontsize = 10)
# dev.off()
par(mfrow = c(2,3))
medCond_name <- rownames(table(payments$DRG.Definition))
provider_name <- rownames(table(payments$Provider.State))
for(i in 1:length(medCond_name)){
with(subset(payments, DRG.Definition == medCond_name[i]),
plot(Average.Covered.Charges, Average.Total.Payments, pch = 20, cex=.5, col = Provider.State,
xlab = "mean covered charges ", ylab = "mean total payments"))
with(payments, legend("topright", pch = 20, col = unique(Provider.State), legend = unique(substr(payments$Provider.State, 0,3))))
for (j in 1:length(provider_name)){
abline(with(subset(payments, DRG.Definition == med_cond[i] & Provider.State == provider_name[j]) ,
lm(Average.Total.Payments ~ Average.Covered.Charges)), col = j)
}
title(medCond_name[i])
}
pdf("question2")
par(mfrow = c(2,3))
medCond_name <- rownames(table(payments$DRG.Definition))
provider_name <- rownames(table(payments$Provider.State))
for(i in 1:length(medCond_name)){
with(subset(payments, DRG.Definition == medCond_name[i]),
plot(Average.Covered.Charges, Average.Total.Payments, pch = 20, cex=.5, col = Provider.State,
xlab = "mean covered charges ", ylab = "mean total payments"))
with(payments, legend("topright", pch = 20, col = unique(Provider.State), legend = unique(substr(payments$Provider.State, 0,3))))
for (j in 1:length(provider_name)){
abline(with(subset(payments, DRG.Definition == med_cond[i] & Provider.State == provider_name[j]) ,
lm(Average.Total.Payments ~ Average.Covered.Charges)), col = j)
}
title(medCond_name[i])
}
dev.off()
?pdf
pdf("question2", width = 15, height = 7)
par(mfrow = c(2,3))
medCond_name <- rownames(table(payments$DRG.Definition))
provider_name <- rownames(table(payments$Provider.State))
for(i in 1:length(medCond_name)){
with(subset(payments, DRG.Definition == medCond_name[i]),
plot(Average.Covered.Charges, Average.Total.Payments, pch = 20, cex=.5, col = Provider.State,
xlab = "mean covered charges ", ylab = "mean total payments"))
with(payments, legend("topright", pch = 20, col = unique(Provider.State), legend = unique(substr(payments$Provider.State, 0,3))))
for (j in 1:length(provider_name)){
abline(with(subset(payments, DRG.Definition == med_cond[i] & Provider.State == provider_name[j]) ,
lm(Average.Total.Payments ~ Average.Covered.Charges)), col = j)
}
title(medCond_name[i])
}
dev.off()
install.packages("xtable")
sessionInfo()
data_link <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
if(! file.exists("data.csv")){
download.file(data_link, "data.csv")
}
getwd()
setwd("~/Documents/Coursera/Data Science/Reproducible Research")
data_link <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
if(! file.exists("data.csv")){
download.file(data_link, "data.csv")
}
setwd("~/Documents/Coursera/Data Science/Reproducible Research/project1/reproducible1")
data_link <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
if(! file.exists("data.csv")){
download.file(data_link, "data.csv")
}
data <- read.csv("data.csv")
View(data)
setwd("~/Documents/Coursera/Data Science/Reproducible Research/project1/reproducible1")
data_link <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
if(! file.exists("data.zip")){
download.file(data_link, "data.zip")
}
unzip("data.zip")
unzip("data.zip")
data <- read.csv("activity.csv")
View(data)
View(data)
table(data$date)
library(dplyr)
summarize(data, total_step = sum(steps))
summarize(data, total_step = sum(steps, na.rm = TRUE))
data %>% group_by(data) %>% summarize(data, total_step = sum(steps, na.rm = TRUE))
data %>% group_by(date) %>% summarize(data, total_step = sum(steps, na.rm = TRUE))
data %>% group_by(date) %>% summarize(total_step = sum(steps, na.rm = TRUE))
data_steps <- data %>% group_by(date) %>% summarize(total_step = sum(steps, na.rm = TRUE))
hist(data_step)
hist(data_steps)
hist(data_steps$total_step)
dev.off()
hist(data_steps$total_step)
hist(data_steps$total_step, breaks = 10)
hist(data_steps$total_step, breaks = 10,
main = "Histogram of total number of steps each day",
xlab = "total number of steps each day")
setwd("~/Documents/Coursera/Data Science/Reproducible Research/project1/RepData_PeerAssessment1")
?unz
data <- read.csv(unz("activity.zip" , "activity.csv"))
View(data)
View(data)
colnames(data)
data_intAvg <- data %>% group_by(interval %>% summarize(interval_avg = mean(steps, na.rm = TRUE))
data_intAvg <- data %>% group_by(interval) %>% summarize(interval_avg = mean(steps, na.rm = TRUE))
data_intAvg
plot(data_intAvg$interval_avg, type = "l",  main = "average steps taken")
data_steps_mean <- data %>% group_by(date) %>% summarize(stepMean = mean(steps, na.rm = TRUE))
data_steps_mean
mean(data_steps_mean, na.rm = TRUE)
mean(data_steps, na.rm = TRUE)
mean(data_steps$total_step, na.rm = TRUE)
median(data_steps$total_step, na.rm = TRUE)
max(data_intAvg)
which.max(data_intAvg)
which.max(data_intAvg$interval_avg)
data_intAvg$interval[which.max(data_intAvg$interval_avg)]
with(data_intAvg, interval[which.max(interval_avg)])
View(data)
is.na(data$steps)
sum(is.na(data$steps))
sum(is.na(data$interval))
sum(is.na(data$date))
sum(is.na(data))
missingTotal <- sum(is.na(data))
na_index <- which(is.na(data))
na_index
pattern_index <- match(activity[na_index, "interval"], daypattern$interval)
pattern_index <- match(data[na_index, "interval"], daypattern$interval)
pattern_index <- match(data[na_index, "interval"], data_intAvg$interval)
?match
pattern_index
data_intAvg$interval
ata[na_index, "interval"]
data[na_index, "interval"]
data_fill <- data
data_fill[na_index, "steps"]
data_intAvg
data_fill[na_index, "steps"] <- data_intAvg[pattern_index, "interva_avg"]
pattern_index <- match(data[na_index, "interval"], data_intAvg$interval)
data_fill <- data
data_fill[na_index, "steps"] <- data_intAvg[pattern_index, "interval_avg"]
View(data_fill)
head(pattern_index)
patten_index
pattern_index
length(pattern_index)
missingTotal
datafill_steps <- data_fill %>% group_by(date) %>% summarize(total_step = sum(steps, na.rm = TRUE))
hist(datafill_steps$total_step, breaks = 10,
main = "Histogram of total number of steps each day",
xlab = "total number of steps each day")
total_step_mean_filled <- mean(datafill_steps$total_step, na.rm = TRUE)
total_step_median_filled <- median(datafill_steps$total_step, na.rm = TRUE)
total_step_mean_filled
total_step_median_filled
total_step_mean
total_step_mean <- mean(data_steps$total_step, na.rm = TRUE)
total_step_median <- median(data_steps$total_step, na.rm = TRUE)
total_step_mean
total_step_median
weekdays(data$date)
?weekdays
data$date
weekdays(data$date)
weekdays(as.date(data$date))
weekdays(as.character.POSIXt(data$date))
weekdays(as.POSIXt(data$date))
data$date <- ymd(data$date)
library(lubridate)
data$date <- ymd(data$date)
weekdays(data$date)
?transform
?ifelse
data_fill <- data_fiill %>% transform(day = factor(ifelse(
weekdays(date) %in% c("Saturday", "Sunday"), "weekend", "weekday")))
data_fill <- data_fill %>% transform(day = factor(ifelse(
weekdays(date) %in% c("Saturday", "Sunday"), "weekend", "weekday")))
## libraries
library(dplyr)
library(lubridate)
## Set work directory and download data
setwd("~/Documents/Coursera/Data Science/Reproducible Research/project1/RepData_PeerAssessment1")
## Load data
data <- read.csv(unz("activity.zip" , "activity.csv"))
data$date <- ymd(data$date)
## histogram of steps for each day
table(data$date)
data_steps <- data %>% group_by(date) %>% summarize(total_step = sum(steps, na.rm = TRUE))
hist(data_steps$total_step, breaks = 10,
main = "Histogram of total number of steps each day",
xlab = "total number of steps each day")
## mean and meadian of total steps taken per day
total_step_mean <- mean(data_steps$total_step, na.rm = TRUE)
total_step_median <- median(data_steps$total_step, na.rm = TRUE)
## average daily activity
data_intAvg <- data %>% group_by(interval) %>% summarize(interval_avg = mean(steps, na.rm = TRUE))
plot(data_intAvg$interval_avg, type = "l",  main = "TS of average steps taken per interval")
## interval with maximum
interval_max <- with(data_intAvg, interval[which.max(interval_avg)])
##### Fill missing number
## Missing number
missingTotal <- sum(is.na(data))
## fill themissing values
na_index <- which(is.na(data)) ## find the index of missing
## match interval index of missing values
pattern_index <- match(data[na_index, "interval"], data_intAvg$interval)
## create data with filled missing values
data_fill <- data
data_fill[na_index, "steps"] <- data_intAvg[pattern_index, "interval_avg"]
## histogram of total steps per day with filled data
datafill_steps <- data_fill %>% group_by(date) %>% summarize(total_step = sum(steps, na.rm = TRUE))
hist(datafill_steps$total_step, breaks = 10,
main = "Histogram of total number of steps each day",
xlab = "total number of steps each day")
## mean and meadian of total steps taken per day
total_step_mean_filled <- mean(datafill_steps$total_step, na.rm = TRUE)
total_step_median_filled <- median(datafill_steps$total_step, na.rm = TRUE)
#### week days vs weekend
data_fill <- data_fill %>% transform(day = factor(ifelse(
weekdays(date) %in% c("Saturday", "Sunday"), "weekend", "weekday")))
View(data_fill)
library(lattice)
data_fill_avg <- data_fill %>% group_by(interval) %>% summarize(interval_avg = mean(steps, na.rm = TRUE))
View(data_fill_avg)
?group_by
data_fill_avg <- data_fill %>% group_by(interval, day) %>% summarize(interval_avg = mean(steps, na.rm = TRUE))
View(data_fill_avg)
xyplot(interva_avg ~ interval | day, type = "l")
xyplot(interva_avg ~ interval | day, data = data_fill, type = "l")
xyplot(interval_avg ~ interval | day, data = data_fill, type = "l")
xyplot(interval_avg ~ interval | day, data = data_fill, type = "l")
colnames(data_fill_avg)
xyplot(interval_avg ~ interval | day, data = data_fill_avg, type = "l")
layout = c(1,2), xlab = "Interval", ylab = "Number of Steps")
xyplot(interval_avg ~ interval | day, data = data_fill_avg, type = "l",
layout = c(1,2), xlab = "Interval", ylab = "Number of Steps")
